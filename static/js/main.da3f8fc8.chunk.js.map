{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","width","TableView","props","num","order","orderBy","columns","rows","page","rowsPerPage","handleRequestSort","handleChangeRowsPerPage","handleChangePage","classes","className","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","Array","isArray","map","t","isEnableSorting","TableCell","sortDirection","name","TableSortLabel","active","direction","onClick","property","event","displayName","TableBody","slice","row","col","key","rowSpan","colSpan","align","Amount","reduce","sum","i","toFixed","TablePagination","rowsPerPageOptions","count","length","onChangePage","onChangeRowsPerPage","theme","root","headerAlign","containerAlign","display","justifyContent","flexDirection","alignItems","minHeight","paddingTop","paper","spacing","textAlign","footerAlign","bottom","footerAlignWithData","App","React","useState","cols","setCols","data","setData","jsonData","setJsonData","setOrder","setOrderBy","setPage","setRowsPerPage","setFileName","getFormattedJsonData","formattedData","fileData","Object","keys","forEach","r","previousObj","nxtObj","push","index","getColumns","value","uniqueKey","find","f","sameRecords","filter","amount","a","b","pkName","substring","findIndex","parseFloat","console","log","Grid","container","item","xs","type","id","style","color","marginBottom","onChange","evt","fileObj","target","files","fileExt","split","pop","alert","handleFleUploadChange","accept","Typography","Button","variant","marginRight","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","result","wb","XLSX","read","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","click","newPage","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da3f8fc8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TableSortLabel, TablePagination } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n\ttable: {\n\t\tminWidth: 700,\n\t},\n\tvisuallyHidden: {\n\t\tborder: 0,\n\t\tclip: 'rect(0 0 0 0)',\n\t\theight: 1,\n\t\tmargin: -1,\n\t\toverflow: 'hidden',\n\t\tpadding: 0,\n\t\tposition: 'absolute',\n\t\ttop: 20,\n\t\twidth: 1,\n\t}\n});\n\nfunction ccyFormat(num) {\n\treturn `${num.toFixed(2)}`;\n}\n\nfunction TableView(props) {\n\tconst { order, orderBy, columns, rows, page, rowsPerPage, handleRequestSort, handleChangeRowsPerPage, handleChangePage } = props;\n\tconst classes = useStyles();\n\tconst totalAmount = (jsonData) => {\n\t\treturn jsonData.map(({ Amount }) => Amount).reduce((sum, i) => sum + i, 0);\n\t}\n\tconst handleSort = (property) => (event) => {\n\t\thandleRequestSort(event, property);\n\t};\n\n\treturn (\n\t\t<div className=\"tableContainer\">\n\t\t\t<TableContainer component={Paper}>\n\t\t\t\t<Table className={classes.table} aria-label=\"spanning table\">\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t{Array.isArray(columns) && columns.map(t => {\n\t\t\t\t\t\t\t\tif (t.isEnableSorting) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\t\tsortDirection={orderBy === t.name ? order : false}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"tableColumn\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<TableSortLabel\n\t\t\t\t\t\t\t\t\t\t\t\tactive={orderBy === t.name}\n\t\t\t\t\t\t\t\t\t\t\t\tdirection={orderBy === t.name ? order : 'asc'}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={handleSort(t.name)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{t.displayName}\n\t\t\t\t\t\t\t\t\t\t\t\t{orderBy === t.name ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={classes.visuallyHidden}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t\t\t</TableSortLabel>\n\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn <TableCell>{t.displayName}</TableCell>\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHead>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{Array.isArray(rows) && rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n\t\t\t\t\t\t\treturn <TableRow>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcolumns.map(col => {\n\t\t\t\t\t\t\t\t\t\tconst key = col.name;\n\t\t\t\t\t\t\t\t\t\treturn <TableCell>{row[key]}</TableCell>\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t})}\n\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell rowSpan={4} />\n\t\t\t\t\t\t\t<TableCell colSpan={7} align=\"right\" >Total amount</TableCell>\n\t\t\t\t\t\t\t<TableCell >{ccyFormat(totalAmount(rows))}</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t\t<TablePagination\n\t\t\t\trowsPerPageOptions={[10, 25, 100]}\n\t\t\t\tcomponent=\"div\"\n\t\t\t\tcount={rows.length}\n\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\tpage={page}\n\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default TableView;","import React from 'react';\nimport './App.css';\nimport XLSX from 'xlsx';\nimport TableView from \"./Table\";\nimport { Button } from '@material-ui/core';\n// import FileUpload from \"./FileUpload\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper, Grid, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\n\t},\n\theaderAlign: {\n\t\twidth: \"100%\",\n\t\theight: \"10%\"\n\t},\n\tcontainerAlign: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"center\",\n\t\tmargin: \"auto\",\n\t\tflexDirection: \"column\",\n\t\talignItems: \"center\",\n\t\tminHeight: \"80%\",\n\t\tpaddingTop: \"20px\",\n\t},\n\tpaper: {\n\t\tpadding: theme.spacing(2),\n\t\ttextAlign: 'center',\n\t\t// color: theme.palette.text.secondary,\n\t},\n\tfooterAlign: {\n\t\twidth: \"100%\",\n\t\tbottom: \"0px\",\n\t\tposition: \"fixed\"\n\t},\n\tfooterAlignWithData: {\n\t\twidth: \"100%\",\n\t\tposition: \"relative\"\n\t}\n}));\n\nfunction App() {\n\tconst [cols, setCols] = React.useState([]);\n\tconst [data, setData] = React.useState(null)\n\tconst [jsonData, setJsonData] = React.useState([]);\n\tconst [order, setOrder] = React.useState('asc');\n\tconst [orderBy, setOrderBy] = React.useState('');\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(10);\n\tconst [fileName, setFileName] = React.useState(\"\");\n\n\tconst getSameRecords = (fData, value, uniqueKey) => {\n\t\treturn fData.filter(t => t[uniqueKey] === value[uniqueKey]);\n\t}\n\n\tconst getColumns = (data) => {\n\t\tconst cols = []\n\t\tObject.keys(data).forEach((t, i) => {\n\t\t\tcols.push({ index: i, name: data[t], displayName: data[t], isEnableSorting: data[t] === \"Amount\" ? true : false });\n\t\t})\n\t\treturn cols;\n\t}\n\n\tconst getFormattedJsonData = (data) => {\n\t\tconst formattedData = [], fileData = [];\n\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\tconst columns = Object.keys(data[0]);\n\t\t\tdata.forEach((t, i) => {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tlet row = {}\n\t\t\t\t\tcolumns.forEach(r => {\n\t\t\t\t\t\tif (data[0][r] === \"Serial Number\" && t[r] === \"NA\") {\n\t\t\t\t\t\t\tconst previousObj = fileData[fileData.length - 1];\n\t\t\t\t\t\t\tif (previousObj[\"Customer Name\"] === t[\"__EMPTY_1\"]) {\n\t\t\t\t\t\t\t\trow[data[0][r]] = previousObj[\"Serial Number\"];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst nxtObj = data[i + 1];\n\t\t\t\t\t\t\t\tif (nxtObj[\"__EMPTY_1\"] === t[\"__EMPTY_1\"])\n\t\t\t\t\t\t\t\t\trow[data[0][r]] = nxtObj[\"__EMPTY_2\"];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trow[data[0][r]] = t[r]\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tfileData.push(row)\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst cols = getColumns(data[0])\n\t\t\tsetCols(cols);\n\t\t}\n\n\t\tif (Array.isArray(fileData) && fileData.length > 0) {\n\t\t\tfileData.forEach(t => {\n\t\t\t\tconst findObj = formattedData.find(f => f[\"Serial Number\"] === t[\"Serial Number\"]);\n\t\t\t\tif (!findObj) {\n\t\t\t\t\tconst sameRecords = getSameRecords(fileData, t, \"Serial Number\");\n\t\t\t\t\tif (Array.isArray(sameRecords) && sameRecords.length > 0) {\n\t\t\t\t\t\tconst amount = sameRecords.reduce((a, b) => a + (b[\"Amount\"] || 0), 0);\n\t\t\t\t\t\tconst pkName = sameRecords.reduce((a, b) => a + `,${(b[\"Package Name\"] || \"\")}`, \"\").substring(1);\n\t\t\t\t\t\tconst index = sameRecords.findIndex(t => t[\"VC Number\"] !== \"NA\" && t[\"Package Name\"] !== \"NA\" && t[\"Package Type\"] !== \"NA\");\n\t\t\t\t\t\tformattedData.push({ ...sameRecords[index], \"S.NO\": formattedData.length + 1, \"Amount\": parseFloat((amount).toFixed(2)), \"Package Name\": pkName });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tconsole.log(fileData);\n\t\tconsole.log(formattedData)\n\t\treturn formattedData;\n\t}\n\n\tconst click = () => {\n\t\tconst reader = new FileReader();\n\t\tconst rABS = !!reader.readAsBinaryString;\n\t\tconsole.log();\n\t\treader.onload = (e) => {\n\t\t\t/* Parse data */\n\t\t\tconst bstr = e.target.result;\n\n\t\t\tconst wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA: true });\n\t\t\t/* Get first worksheet */\n\t\t\tconst wsname = wb.SheetNames[0];\n\t\t\tconst ws = wb.Sheets[wsname];\n\t\t\t/* Convert array of arrays */\n\t\t\tconst jsonData = XLSX.utils.sheet_to_json(ws);\n\t\t\t// const csv = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n\t\t\t// console.log(data)\n\n\t\t\t// console.log(csv)\n\t\t\tconst formattedData = getFormattedJsonData(jsonData);\n\t\t\tif (formattedData.length > 0) {\n\t\t\t\tsetJsonData(formattedData);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"File is empty or sheet data is empty\")\n\t\t\t}\n\n\t\t};\n\t\treader.readAsBinaryString(data);\n\n\t}\n\n\tconst handleFleUploadChange = (evt) => {\n\t\tlet fileObj = evt.target.files[0];\n\t\tconst name = fileObj && fileObj.name ? fileObj.name : \"\";\n\t\tconst fileExt = name.split('.').pop();\n\t\tif (name && fileExt === \"xlsx\") {\n\t\t\tsetData(fileObj);\n\t\t\tsetFileName(name)\n\t\t} else {\n\t\t\t//error\n\t\t\talert(\"Pls upload .xlsx file\");\n\t\t}\n\n\t}\n\n\tconst handleRequestSort = (event, property) => {\n\t\tconst isAsc = orderBy === property && order === 'asc';\n\t\tsetOrder(isAsc ? 'desc' : 'asc');\n\t\tsetOrderBy(property);\n\t};\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(+event.target.value);\n\t\tsetPage(0);\n\t};\n\tconst classes = useStyles();\n\treturn (\n\t\t<>\n\t\t\t<div className={classes.root}>\n\t\t\t\t<Grid container>\n\t\t\t\t\t<header className={classes.headerAlign}>\n\t\t\t\t\t\t<Paper component=\"h1\" className={classes.paper}>Excel Viewer</Paper>\n\t\t\t\t\t</header>\n\n\t\t\t\t\t<Grid item xs={12} className={classes.containerAlign}>\n\t\t\t\t\t\t<input type=\"file\" id=\"myFile\" style={{ color: \"black\", marginBottom: \"15px\" }} name=\"filename\" onChange={(evt) => { handleFleUploadChange(evt) }} accept=\".xlsx\" />\n\t\t\t\t\t\t{data && <Typography>\n\t\t\t\t\t\t\t<Button color=\"primary\" variant=\"contained\" component=\"label\" style={{ marginRight: \"5px\" }} onClick={() => click()} > View</Button>\n\t\t\t\t\t\t\t<Button color=\"primary\" variant=\"contained\" component=\"label\" onClick={() => { setData(null); setFileName(\"\"); setJsonData([]) }} > clear</Button>\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t{cols && jsonData && cols.length > 0 && jsonData.length > 0 &&\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<TableView\n\t\t\t\t\t\t\t\t\tcolumns={cols}\n\t\t\t\t\t\t\t\t\trows={jsonData}\n\t\t\t\t\t\t\t\t\torder={order}\n\t\t\t\t\t\t\t\t\torderBy={orderBy}\n\t\t\t\t\t\t\t\t\tpage={page}\n\t\t\t\t\t\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\t\t\t\t\t\thandleChangePage={handleChangePage}\n\t\t\t\t\t\t\t\t\thandleChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\t\t\t\t\t\thandleRequestSort={handleRequestSort}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{/* <FileUpload /> */}\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<footer className={cols && jsonData && cols.length > 0 && jsonData.length > 0 ? classes.footerAlignWithData : classes.footerAlign}>\n\t\t\t\t\t\t<Typography className={classes.paper}>\n\t\t\t\t\t\t\t<span>💻</span> Design and developed by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.linkedin.com/in/ponseelan/\">Ponseelan</a><span>🚀</span>\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</footer>\n\t\t\t\t</Grid>\n\t\t\t</div >\n\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}